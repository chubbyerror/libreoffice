// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: libreoffice/libreoffice.proto

#include "libreoffice/libreoffice.pb.h"
#include "libreoffice/libreoffice.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace libreoffice {

static const char* Libreoffice_method_names[] = {
  "/libreoffice.Libreoffice/Convert",
};

std::unique_ptr< Libreoffice::Stub> Libreoffice::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Libreoffice::Stub> stub(new Libreoffice::Stub(channel));
  return stub;
}

Libreoffice::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Convert_(Libreoffice_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Libreoffice::Stub::Convert(::grpc::ClientContext* context, const ::libreoffice::Request& request, ::libreoffice::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Convert_, context, request, response);
}

void Libreoffice::Stub::experimental_async::Convert(::grpc::ClientContext* context, const ::libreoffice::Request* request, ::libreoffice::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Convert_, context, request, response, std::move(f));
}

void Libreoffice::Stub::experimental_async::Convert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::libreoffice::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Convert_, context, request, response, std::move(f));
}

void Libreoffice::Stub::experimental_async::Convert(::grpc::ClientContext* context, const ::libreoffice::Request* request, ::libreoffice::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Convert_, context, request, response, reactor);
}

void Libreoffice::Stub::experimental_async::Convert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::libreoffice::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Convert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::libreoffice::Response>* Libreoffice::Stub::AsyncConvertRaw(::grpc::ClientContext* context, const ::libreoffice::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::libreoffice::Response>::Create(channel_.get(), cq, rpcmethod_Convert_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::libreoffice::Response>* Libreoffice::Stub::PrepareAsyncConvertRaw(::grpc::ClientContext* context, const ::libreoffice::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::libreoffice::Response>::Create(channel_.get(), cq, rpcmethod_Convert_, context, request, false);
}

Libreoffice::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Libreoffice_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Libreoffice::Service, ::libreoffice::Request, ::libreoffice::Response>(
          std::mem_fn(&Libreoffice::Service::Convert), this)));
}

Libreoffice::Service::~Service() {
}

::grpc::Status Libreoffice::Service::Convert(::grpc::ServerContext* context, const ::libreoffice::Request* request, ::libreoffice::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace libreoffice

